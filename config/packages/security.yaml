security:
    enable_authenticator_manager: true
    # quel type d'algo on va utiliser pour gestion des mots de passe et autres param secu
    # doc a voir ds symfony authenticator_manager
    encoders:
        App\Entity\TUser: bcrypt
    role_hierarchy:
            ROLE_VISITEUR: ROLE_USER
            ROLE_AUTHOR: [ROLE_VISITEUR]
            ROLE_ADMIN: [ROLE_VISITEUR, ROLE_AUTHOR]
            ROLE_ROOT: [ROLE_ADMIN]
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
        # username est la cl√© d'authenfication
        users_provider:
            entity: {class: App\Entity\TUser, property: username }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api_blog:
            pattern:   ^/api/v1/secure
            stateless: true
            anonymous: false
            provider: users_provider
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        main:
            lazy: true
            provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/v1, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/v1/secure, roles: ROLE_VISITEUR }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
